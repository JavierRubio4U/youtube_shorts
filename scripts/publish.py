# scripts/publish.py
from pathlib import Path
import sys
import json
import logging
import os

# A√±adir la carpeta de scripts al path
ROOT = Path(__file__).resolve().parents[1]
SCRIPTS = ROOT / "scripts"
if str(SCRIPTS) not in sys.path:
    sys.path.insert(0, str(SCRIPTS))

# M√≥dulos del proyecto
import find 
import select_next_release
import download_assets
import build_youtube_metadata
import build_short
import upload_youtube
import cleanup_temp
import subprocess


STATE = ROOT / "output" / "state"

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def main():
    # Paso 0: Limpieza de la ejecuci√≥n anterior y archivado de shorts anteriores
    logging.info("‚ñ∂ Actualizando yt-dlp...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "yt-dlp"], check=True)
        logging.info("‚úÖ yt-dlp actualizado con √©xito.")
    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå Fallo al actualizar yt-dlp: {e}")
        # Puedes decidir si quieres continuar o salir aqu√≠.


    logging.info("‚ñ∂ Paso 0: Limpieza de la ejecuci√≥n anterior y archivado de shorts anteriores")
    cleanup_temp.cleanup_on_start()

    max_attempts = 5  # N√∫mero de intentos para procesar pel√≠culas
    attempts = 0
    video_published = False

    while attempts < max_attempts and not video_published:
        attempts += 1
        logging.info(f"‚ñ∂ Intento de publicaci√≥n {attempts}/{max_attempts}...")

        # Paso 1: Seleccionar siguiente pel√≠cula
        logging.info("‚ñ∂ Paso 1: seleccionar siguiente pel√≠cula‚Ä¶")
        try:
            sel = find.find_and_select_next()
            if not sel:
                logging.info("üõë No se seleccion√≥ una nueva pel√≠cula. Proceso detenido.")
                break
        except Exception as e:
            logging.error(f"Error en la selecci√≥n de pel√≠cula: {e}")
            continue

        # Paso 2: Descargar assets
        logging.info("‚ñ∂ Paso 2: descargar assets (vertical/letterbox, 8 backdrops)‚Ä¶")
        try:
            download_assets.main()
        except Exception as e:
            logging.error(f"Fallo en la descarga de assets: {e}")
            continue

        # Paso 2.5: Extraer clips del tr√°iler
        logging.info("‚ñ∂ Paso 2.5: extraer clips del tr√°iler (con logs verbose)...")
        try:
            # Capturamos la salida para saber si hay un error espec√≠fico
            result = subprocess.run([sys.executable, str(ROOT / "scripts" / "extract_video_clips_from_trailer.py")],
                                    check=True, cwd=ROOT, capture_output=True, text=True)
            print("STDOUT de extracci√≥n:", result.stdout)
            if result.stderr:
                print("STDERR de extracci√≥n:", result.stderr)
        except subprocess.CalledProcessError as e:
            logging.error(f"Fallo en la extracci√≥n de clips: {e.stderr}")
            continue  # Si la extracci√≥n falla, el bucle pasa al siguiente candidato

        # Paso 3: generar metadata de YouTube‚Ä¶
        logging.info("‚ñ∂ Paso 3: generar metadata de YouTube‚Ä¶")
        try:
            build_youtube_metadata.main()
        except Exception as e:
            logging.error(f"Fallo en la generaci√≥n de metadatos: {e}")
            continue

        # Paso 4: generar video short (MP4)‚Ä¶
        logging.info("‚ñ∂ Paso 4: generar video short (MP4)‚Ä¶")
        mp4_path = build_short.main()

        video_id = None # Inicializamos video_id para la limpieza

        # Paso 5: subir a YouTube‚Ä¶
        if mp4_path:
            logging.info("‚ñ∂ Paso 5: subir a YouTube‚Ä¶")
            try:
                video_id = upload_youtube.main(mp4_path)
            except Exception as e:
                logging.error(f"Fallo en la subida a YouTube: {e}")
        else:
            logging.error("üõë La creaci√≥n del v√≠deo fall√≥ o se omiti√≥. No se subir√° a YouTube.")
            continue

        if video_id:
            # Ahora usa los datos de 'sel' que ya tenemos, es m√°s seguro.
            tmdb_id_to_publish = sel["tmdb_id"]
            trailer_url_to_publish = sel["trailer_url"]
            select_next_release.mark_published(tmdb_id_to_publish, trailer_url_to_publish)
            
        else:
            logging.error("üõë La subida fall√≥ o se omiti√≥. No se marcar√° como publicado.")
            # Continuar en el bucle para intentar con el siguiente candidato

    # Paso 6: Limpieza final (solo si todo sali√≥ bien)
    if video_published:
        logging.info("‚ñ∂ Paso 6: Limpieza final (solo si todo sali√≥ bien)")
        cleanup_temp.cleanup_on_end()
        logging.info("‚úÖ Proceso completado. Archivos temporales eliminados.")
    else:
        logging.info("‚Ñπ No se realiz√≥ limpieza final por fallo en la subida o la creaci√≥n del v√≠deo.")

if __name__ == "__main__":
    main()